name: Release

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag to use (e.g., v1.2.3)"
        required: true
      release_name:
        description: "Optional release name (defaults to release tag)"
        required: false
      publish_wasm:
        description: "Publish WASM package as asset (true/false)"
        required: false
        default: "true"

env:
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Build Targets for Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - esp32-s3
          - esp32-c3
          - esp32-c6
          - wasm32-unknown-unknown
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable Rust caching
        uses: Swatinem/rust-cache@v2

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          components: clippy, rustfmt

      - name: Build for ${{ matrix.target }}
        run: cargo build --release --target ${{ matrix.target }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          name: ${{ github.event.inputs.release_name || github.event.inputs.release_tag }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload WASM Package
        if: ${{ github.event.inputs.publish_wasm == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          name: "WASM Package"
          files: |
            wasm/pkg/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
